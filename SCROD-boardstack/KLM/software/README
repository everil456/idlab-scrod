These are simple instructions for the running USB based readout. KLM project needs to be checked out  and these instructions refer to 'software' subfolder.

External dependencies:
	libusb-1.0

Compiling:
	in 'software' folder: make

Configuration files:
	Sample configuration files can be found in 'settings' subfolder. It has to be a well formatted XML file with <KLM> root node. Its child nodes should be <module> nodes, one describing each KLM board, with 'id' attribute defining SCROD ID. Each module has two subnodes: 
		<registers> defining the SCROD based register values. 'stage' attribute has two possible values 'pre' and 'post'. It controls the time at which the register is set. The setting sequence is 'pre'->'asic registers'->'post'
		<asics> registers for all 10 slots on the KLM motherboard.

Usage:
	For all the applications the help can be obtained if the program is called without input parameters. The programs are:
	KlmAsicWrite ... setting the register on ASICs
	KlmRegisterWrite ... setting the register on the SCROD
	KlmRegisterRead ... reading register on the SCROD
	KlmConfigure ... configure the entire system with the XML setting file
	KlmToFile ... software triggered data recording

Operation:
	turn on all the boards and upload FW with different SCROD ID
	connect all the boards to a readout computer via USB
	run KlmToFile with appropriate setting file

Developer info:
	defines.h ... all the constants. Highlights:
		'USB_ENDPOINT_PACKET_SIZE' is the most crucial for reliable readout. It should be multiple of the data fragment size of the USB device. Use 'lsusb -v' to determine that on a given system.
		'USB_TIMEOUT_MS' is the USB timeout. It should be long enough to ensure there are no timeouts between the data transmission packets, since such scenario is not supported by the software. 
	DetectorInterface ... is a virtual base class representing all means of communication with the device. The two protected purely virtual functions should be overwritten in specialized classes like 'UsbInterface' and 'CopperInterface'.
	KlmModule ... represents a single module and provides the means to set and read registers and perform other control operations.
	KlmSystem ... is a singleton class representing the entire KLM readout. Via its instance (KlmSystem::KLM()) individual modules can be reached, or entire system configured. Highlights:
		start() function: starts the readout of all the modules, with a separate thread for each one. Due to multi-threaded nature of the readout, all the received packets are forwarded to 'ObjectSync<ScrodPacket>' instance given as the input parameter (see next lines where to get this instance). 
		stop() function: stops all the data receiving threads. Note: between start() and stop() of the KlmSystem all SCROD responses are forwarded to receiving threads. Even command responses from commands issued in other threads, thus the software poses the restriction: between these two functions all issued commands should be send without a request for a command reply!
	KlmConsumer ... virtual class holding 'ObjectSync<ScrodPacket>' instance. Its purpose is to wait for packets (from the receiver threads) and performing data manipulation. A sample is a derived class 'KlmFile' which simply writes the received packets to a file.
