--------------------------------------------------------------------------------
-- File       : demo_tb.vhd
-- Author     : Xilinx Inc.
--------------------------------------------------------------------------------
-- (c) Copyright 2009 Xilinx, Inc. All rights reserved.
--
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
--
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
--
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
--
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES. 
-- 
-- 
--------------------------------------------------------------------------------
-- Description: This testbench will exercise the ports of the Ethernet
-- 1000BASE-X PCS/PMA core's example design to perform the following
-- operations:
--
------------------
--  Configuration
------------------
--  The core will be reset, then Auto-Negotiation (if present) will
--  be disabled and and the core will be taken out of the Isolate
--  state.
--
------------------
--  Transmitter
------------------
--  Four frames are generated by the Tx Stimulus and pushed into the
--  GMII transmitter.
--
--  The PHY side transmitter interface data is captured, 8B10B decoded
--  and the Tx Monitor checks that the captured data matches that
--  injected.
--
------------------
--  Receiver
------------------
--  Four frames are generated by the Rx Stimulus, 8B10B encoded and
--  pushed into the PHY side receiver interface.
--
--  The GMII side receiver interface data is captured and the
--  Rx Monitor checks that the captured data matches that injected.


------------------------------------------------------------------------
--                    Demonstration Testbench                          |
--                                                                     |
--                                                                     |
--                  --------------------------                         |
--                  |     Example Design     |                         |
--                  |         (DUT)          |                         |
--                  |                        |                         |
--                  |                        |                         |
--                  |                        |                         |
--   Tx             |                        |  8B10B decode, Tx       |
--   Generate   ------->                  -------->           Monitor  |
--   Frames         |                        |                Frames   |
--                  |GMII                PHY |                         |
--                  | I/F                I/F |                         |
--                  |                        |                         |
--                  |                        |                         |
--                  |                        |                         |
--    Rx            |                        |  8B10B encode, Rx       |
--    Monitor  <--------                  <--------           Generate |
--    Frames        |                        |                Frames   |
--                  |                        |                         |
--                  ------------^-------------                         |
--                              |                                      |
--                              |                                      |
--                          Stimulate                                  |
--                          MDIO I/F                                   |
--                         (if present)                                |
--                                                                     |
------------------------------------------------------------------------


entity demo_tb is
end demo_tb;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library unisim;
use unisim.vcomponents.all;


architecture behav of demo_tb is



  ------------------------------------------------------------------------------
  -- Component declaration for the Device Under Test (DUT)
  ------------------------------------------------------------------------------

   component ethercon_example_design
      port(

      --------------------------------------------------------------------------
      -- Core connected to GTP/X0
      --------------------------------------------------------------------------

      -- GMII Interface
      -----------------
      gmii_tx_clk0           : in std_logic;                     -- Transmit clock from client MAC.
      gmii_rx_clk0           : out std_logic;                    -- Receive clock to client MAC.
      gmii_txd0              : in std_logic_vector(7 downto 0);  -- Transmit data from client MAC.
      gmii_tx_en0            : in std_logic;                     -- Transmit control signal from client MAC.
      gmii_tx_er0            : in std_logic;                     -- Transmit control signal from client MAC.
      gmii_rxd0              : out std_logic_vector(7 downto 0); -- Received Data to client MAC.
      gmii_rx_dv0            : out std_logic;                    -- Received control signal to client MAC.
      gmii_rx_er0            : out std_logic;                    -- Received control signal to client MAC.

      -- Management: MDIO Interface
      -----------------------------
      mdc0                   : in    std_logic;                  -- Management Data Clock
      mdio0_i                : in    std_logic;                  -- Management Data In
      mdio0_o                : out   std_logic;                  -- Management Data Out
      mdio0_t                : out   std_logic;                  -- Management Data Tristate
      phyad0                 : in std_logic_vector(4 downto 0);  -- Port address for MDIO.

      -- General IO's
      ---------------
      link_timer_value0      : in std_logic_vector(8 downto 0);  -- Programmable Auto-Negotiation Link Timer Control
      an_interrupt0          : out std_logic;                    -- Interrupt to processor to signal that Auto-Negotiation has completed
      status_vector0         : out std_logic_vector(15 downto 0); -- Core status.
      reset0                 : in std_logic;                     -- Asynchronous reset for core.
      signal_detect0         : in std_logic;                     -- Input from PMD to indicate presence of optical input.


      --------------------------------------------------------------------------
      -- Transceiver interfaces
      --------------------------------------------------------------------------

      brefclk_p              : in std_logic;                     -- Differential +ve of reference clock for transceiver: 125MHz, very high quality
      brefclk_n              : in std_logic;                     -- Differential -ve of reference clock for transceiver: 125MHz, very high quality

      txp0                   : out std_logic;                    -- Differential +ve of serial transmission from PMA to PMD.
      txn0                   : out std_logic;                    -- Differential -ve of serial transmission from PMA to PMD.
      rxp0                   : in std_logic;                     -- Differential +ve for serial reception from PMD to PMA.
      rxn0                   : in std_logic;                     -- Differential -ve for serial reception from PMD to PMA.

      txp1                   : out std_logic;                    -- Differential +ve of serial transmission from PMA to PMD.
      txn1                   : out std_logic;                    -- Differential -ve of serial transmission from PMA to PMD.
      rxp1                   : in std_logic;                     -- Differential +ve for serial reception from PMD to PMA.
      rxn1                   : in std_logic                      -- Differential -ve for serial reception from PMD to PMA.

   );
   end component;



  ------------------------------------------------------------------------------
  -- Component declaration for the Ethernet Frame Stimulus block
  ------------------------------------------------------------------------------

   component stimulus_tb
     generic (
        INSTANCE_NUMBER      : integer
     );
     port (

      -- Physical Interface (transceiver)
      -----------------------------------
      txp                    : in  std_logic;
      txn                    : in  std_logic;
      rxp                    : out std_logic;
      rxn                    : out std_logic;

      -- GMII Interface
      -----------------
      gmii_tx_clk            : out std_logic;
      gmii_rx_clk            : in std_logic;
      gmii_txd               : out std_logic_vector(7 downto 0);
      gmii_tx_en             : out std_logic;
      gmii_tx_er             : out std_logic;
      gmii_rxd               : in std_logic_vector(7 downto 0);
      gmii_rx_dv             : in std_logic;
      gmii_rx_er             : in std_logic;

      -- Test Bench Semaphores
      ------------------------
      configuration_finished : in  boolean;
      tx_monitor_finished    : out boolean;
      rx_monitor_finished    : out boolean
      );
   end component;



  ------------------------------------------------------------------------------
  -- Stimulus - MDIO data frame
  ------------------------------------------------------------------------------
  -- type to support management frame
  type frame_of_mdio is array (natural range 0 to 63) of std_logic;

  constant mdio_data : frame_of_mdio := (
         '1','1','1','1','1','1','1','1', -- preamble field
         '1','1','1','1','1','1','1','1',
             '1','1','1','1','1','1','1','1',
             '1','1','1','1','1','1','1','1',
             '0','1',              -- start opcode
             '0','1',              -- write opcode
             '0','0','0','0','0',  -- phyad (the PHY "broadcast" address: write to any connected device)
             '0','0','0','0','0',  -- regad (write to Configuration Register)
             '1','0',              -- Turn-around cycles
                    -- DATA FIELD

             '0',   -- Do not assert Reset
             '0',   -- No loopback
             '0',   -- Speed selection
             '0',   -- Disable Auto-Negotiation
             '0',   -- Disable Power Down
             '0',   -- Disable Isolate GMII
             '0',   -- Disable Auto-Negotiation Restart
             '1',   -- Full Duplex Mode
             '0',   -- Disable Collision Test
             '0',   -- Speed selection
             '0',   -- Reserved
             '0',
             '0',
             '0',
             '0',
             '0'
           );



  ------------------------------------------------------------------------------
  -- testbench signals
  ------------------------------------------------------------------------------

  -- testbench control semaphores
  signal configuration_finished  : boolean := false;
  signal tx_monitor_finished0    : boolean := false;
  signal rx_monitor_finished0    : boolean := false;
  signal simulation_finished     : boolean := false;


  ------------------------------------------------------------------------------
  -- DUT signals
  ------------------------------------------------------------------------------

  -- System Reset
  signal reset                   : std_logic;

  -- Management: MDIO Interface
  -----------------------------
  signal mdc                     : std_logic;
  signal mdio_i                  : std_logic;
  signal mdio_o                  : std_logic;
  signal mdio_t                  : std_logic;

  -- Transceiver Interface
  ------------------------
  signal brefclk_p               : std_logic;
  signal brefclk_n               : std_logic;

  signal txp0                    : std_logic;
  signal txn0                    : std_logic;
  signal rxp0                    : std_logic;
  signal rxn0                    : std_logic;

  signal txp1                    : std_logic;
  signal txn1                    : std_logic;
  signal rxp1                    : std_logic;
  signal rxn1                    : std_logic;

  ---------------------------
  -- Core connected to GTP/X0
  ---------------------------

  -- GMII Interface
  -----------------
  signal gmii_tx_clk0            : std_logic;
  signal gmii_txd0               : std_logic_vector(7 downto 0);
  signal gmii_tx_en0             : std_logic;
  signal gmii_tx_er0             : std_logic;
  signal gmii_rx_clk0            : std_logic;
  signal gmii_rxd0               : std_logic_vector(7 downto 0);
  signal gmii_rx_dv0             : std_logic;
  signal gmii_rx_er0             : std_logic;

  -- Management: MDIO Interface
  -----------------------------
  signal phyad0                  : std_logic_vector(4 downto 0);

  -- Auto-Negotiation
  -------------------
  signal link_timer_value0       : std_logic_vector(8 downto 0);
  signal an_interrupt0           : std_logic;

  -- Other IO's
  -------------
  signal status_vector0          : std_logic_vector(15 downto 0);
  signal signal_detect0          : std_logic;



begin



   -----------------------------------------------------------------------------
   -- Create clock sources
   -----------------------------------------------------------------------------

   -- Create the transceiver Reference clock (125 MHz)
   p_brefclk : process
   begin
     brefclk_p <= '0';
     brefclk_n <= '1';
     wait for 4 ns;
     brefclk_p <= '1';
     brefclk_n <= '0';
     wait for 4 ns;
   end process p_brefclk;



   -----------------------------------------------------------------------------
   -- Wire up Device Under Test
   -----------------------------------------------------------------------------
   dut : ethercon_example_design
     port map (
      gmii_tx_clk0           => gmii_tx_clk0,
      gmii_rx_clk0           => gmii_rx_clk0,
      gmii_txd0              => gmii_txd0,
      gmii_tx_en0            => gmii_tx_en0,
      gmii_tx_er0            => gmii_tx_er0,
      gmii_rxd0              => gmii_rxd0,
      gmii_rx_dv0            => gmii_rx_dv0,
      gmii_rx_er0            => gmii_rx_er0,
      mdc0                   => mdc,
      mdio0_i                => mdio_i,
      mdio0_o                => mdio_o,
      mdio0_t                => mdio_t,
      phyad0                 => phyad0,
      link_timer_value0      => link_timer_value0,
      an_interrupt0          => an_interrupt0,
      status_vector0         => status_vector0,
      reset0                 => reset,
      signal_detect0         => signal_detect0,
      brefclk_p              => brefclk_p,
      brefclk_n              => brefclk_n,
      txp0                   => txp0,
      txn0                   => txn0,
      rxp0                   => rxp0,
      rxn0                   => rxn0,
      txp1                   => txp1,
      txn1                   => txn1,
      rxp1                   => rxp1,
      rxn1                   => rxn1
   );



   -----------------------------------------------------------------------------
   -- Instantiate a Stimulus module for the core connected to transceiver 0
   -----------------------------------------------------------------------------
   stimulus_0 : stimulus_tb
     generic map (
      INSTANCE_NUMBER        => 0
     )
     port map (
      txp                    => txp0,
      txn                    => txn0,
      rxp                    => rxp0,
      rxn                    => rxn0,

      gmii_tx_clk            => gmii_tx_clk0,
      gmii_rx_clk            => gmii_rx_clk0,
      gmii_txd               => gmii_txd0,
      gmii_tx_en             => gmii_tx_en0,
      gmii_tx_er             => gmii_tx_er0,
      gmii_rxd               => gmii_rxd0,
      gmii_rx_dv             => gmii_rx_dv0,
      gmii_rx_er             => gmii_rx_er0,

      configuration_finished => configuration_finished,
      tx_monitor_finished    => tx_monitor_finished0,
      rx_monitor_finished    => rx_monitor_finished0
      );



  -- RocketIO 1 is unused
  rxp1 <= '0';
  rxn1 <= '1';



  ------------------------------------------------------------------------------
  -- Simulate that PMD sublayer has detected and optical input.
  ------------------------------------------------------------------------------
  signal_detect0 <= '1';


  ------------------------------------------------------------------------------
  -- Set the Auto-Negotiation Link Timer duration for the core
  ------------------------------------------------------------------------------

  -- The link timer value is here set at 10.39 ms (please refer to the
  -- core's User Manual).
  link_timer_value0  <= "100111101";


  ------------------------------------------------------------------------------
  -- Set the PHYAD
  ------------------------------------------------------------------------------
  phyad0 <= "00001";



  ------------------------------------------------------------------------------
  -- Configuration process. This process will reset the core, then write
  -- to configuration register 0 to turn off autonegotiation and take
  -- the core out of the isolate state.
  ------------------------------------------------------------------------------

  -- drives MDC at 2.5 MHz
  p_mdc : process
  begin
      mdc <= '0';
      wait for 200 ns;
      mdc <= '1';
      wait for 200 ns;
  end process p_mdc;


   -- Main configuration process
  p_configuration : process
    variable column_index : natural := 0;  -- Column counter within frame
  begin
    assert false
      report "Timing checks are not valid" & cr
      severity note;

    mdio_i <= '1';  -- simulate tri-state with weak pullup

    -- reset the core
    assert false
      report "Resetting core..." & cr
      severity note;
    reset <= '1';
    wait for 5000 ns;
    wait until brefclk_p'event and brefclk_p = '1';
    reset <= '0';

    -- wait until GTP/X has initialised (is toggling)
    wait until txp0 = '1';

    -- Write to PCS Management configuration register 0.
    assert false
      report "Writing to Control Register in PCS sublayer...." & cr
      severity note;
    wait until mdc'event and mdc = '0';  -- centre mdio around mdc rising edge

    -- transmit serial management frame
    for i in mdio_data'low to mdio_data'high loop
      wait until mdc'event and mdc = '0';
      mdio_i <= mdio_data(i);
    end loop; -- i

    wait until mdc'event and mdc = '0';
    mdio_i <= '1';  -- simulate tri-state with weak pullup

    -- wait for core to obtain synchronisation
    while status_vector0(0) /= '1' loop
      wait until mdc'event and mdc = '0';
    end loop;
    wait for 2 us;

    configuration_finished <= true;
    wait;
  end process p_configuration;


  ------------------------------------------------------------------------------
  -- End the simulation.
  ------------------------------------------------------------------------------

  simulation_finished <= tx_monitor_finished0 and rx_monitor_finished0;

  p_end_simulation : process
  begin
    wait until simulation_finished for 200 us;
    assert simulation_finished
      report "** Error: Testbench timed out"
      severity failure;
    wait for 1 us;
    assert false
      report "Simulation Stopped."
      severity failure;
  end process p_end_simulation;



  ------------------------------------------------------------------------------
  -- GSR
  ------------------------------------------------------------------------------

  -- workaround to reset GTP/X smartmodel properly. GSR is located in the
  -- unisim.vcomponents package.
  p_gsr : process
  begin
    gsr <= '1';
    wait for 100 ns;
    gsr <= '0';
    wait;
  end process p_gsr;

  rocbuf_i : ROCBUF
    port map (
      I => gsr,
      O => open);



end behav;

